const mongoose = require('mongoose');
require('dotenv').config();

async function healthCheck() {
  console.log('üè• === V√âRIFICATION SANT√â LINEUP ===\n');

  // 1. Variables d'environnement
  console.log('üìã Variables d\'environnement:');
  const envChecks = {
    'NODE_ENV': process.env.NODE_ENV || 'non d√©fini',
    'PORT': process.env.PORT || '5000 (d√©faut)',
    'MONGODB_URI': process.env.MONGODB_URI ? '‚úÖ Configur√©' : '‚ùå Manquant',
    'JWT_SECRET': process.env.JWT_SECRET ? '‚úÖ Configur√©' : '‚ùå Manquant'
  };

  Object.entries(envChecks).forEach(([key, value]) => {
    console.log(`   ${key}: ${value}`);
  });

  // 2. Connexion MongoDB
  console.log('\nüóÑÔ∏è Base de donn√©es:');
  try {
    if (!process.env.MONGODB_URI) {
      console.log('   ‚ùå MONGODB_URI non configur√©');
      return;
    }

    await mongoose.connect(process.env.MONGODB_URI);
    console.log('   ‚úÖ Connexion MongoDB r√©ussie');

    // 3. V√©rification des collections
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log(`   üìä Collections trouv√©es: ${collections.length}`);
    collections.forEach(col => {
      console.log(`      - ${col.name}`);
    });

    // 4. Statistiques des donn√©es
    const stats = await Promise.all([
      mongoose.connection.db.collection('users').countDocuments(),
      mongoose.connection.db.collection('tickets').countDocuments(),
      mongoose.connection.db.collection('roles').countDocuments()
    ]);

    console.log('\nüìà Statistiques:');
    console.log(`   üë• Utilisateurs: ${stats[0]}`);
    console.log(`   üé´ Tickets: ${stats[1]}`);
    console.log(`   üîê R√¥les: ${stats[2]}`);

    // 5. V√©rification des index
    const ticketIndexes = await mongoose.connection.db.collection('tickets').indexes();
    console.log(`\nüóÇÔ∏è Index tickets: ${ticketIndexes.length}`);

  } catch (error) {
    console.log(`   ‚ùå Erreur MongoDB: ${error.message}`);
  } finally {
    await mongoose.disconnect();
  }

  // 6. Recommandations
  console.log('\nüí° Recommandations:');
  if (!process.env.JWT_SECRET) {
    console.log('   ‚ö†Ô∏è Configurez JWT_SECRET pour la s√©curit√©');
  }
  if (!process.env.MONGODB_URI) {
    console.log('   ‚ö†Ô∏è Configurez MONGODB_URI pour la base de donn√©es');
  }
  if (process.env.NODE_ENV !== 'production') {
    console.log('   ‚ÑπÔ∏è En mode d√©veloppement');
  }

  console.log('\n‚úÖ V√©rification termin√©e');
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  healthCheck().catch(console.error);
}

module.exports = healthCheck; 